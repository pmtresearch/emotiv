/*

Copyright (C) 2016,2017 wallzero 2016,2017

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software Foundation,
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this
program. If not, see <http://www.gnu.org/licenses/>.

*/

/*
  eslint-disable
  global-require,
  no-process-env,
  no-undefined,
  no-nested-ternary,
  complexity,
  import/no-commonjs,
  import/unambiguous,
  import/no-dynamic-require,
  import/max-dependencies,
  filenames/match-regex
*/
const os = require('os');
const v8 = require('v8');
const path = require('path');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');
const CompressionPlugin = require('compression-webpack-plugin');
const DefinePlugin = require('dotenv-webpack');
const DuplicatePackageCheckerPlugin = require('duplicate-package-checker-webpack-plugin');
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
const HtmlBeautifyPlugin = require('html-beautify-webpack-plugin');
const HtmlWebpackHarddiskPlugin = require('html-webpack-harddisk-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const nodeExternals = require('webpack-node-externals');
const StyleLintPlugin = require('stylelint-webpack-plugin');
const SubresourceIntegrityPlugin = require('webpack-subresource-integrity');
const tsTransformCssModules = require('ts-transform-css-modules').transform; // eslint-disable-line no-unused-vars
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
const webpack = require('webpack');
const WebappWebpackPlugin = require('webapp-webpack-plugin');
const {GenerateSW} = require('workbox-webpack-plugin');
const {
  baseHref,
  cache,
  compression,
  context,
  eslint,
  env,
  favicon,
  ignore,
  index,
  library,
  parallel,
  platforms,
  polyfills,
  postcss,
  postcssWhitelist,
  production,
  project,
  pwa,
  reportPath,
  resolve,
  shortName,
  sourceMap,
  staticPath,
  stylelint,
  stylelintIgnore,
  tsconfig,
  tslint
} = require('./config');

const HASH_LIMIT = 6;

const angularPolyfills = require.resolve('./typescript/angularPolyfills');
const typescriptPolyfills = require.resolve('./typescript/typescriptPolyfills');

const cacheLoader = {
  loader: 'cache-loader',
  options: {cacheDirectory: cache}
};

const workers = os.cpus().length - 2 < 1 ? 1 : os.cpus().length - 2;
const threadLoader = {
  loader: 'thread-loader',
  options: {workers}
};

const styleLoaders = function (options = {}) {
  /* modules, minimize, camelCase, sourceMap, postcss, sass */
  options.camelCase = options.camelCase === undefined ? true : options.camelCase;

  return [].concat(
    production ? [{
      loader: MiniCssExtractPlugin.loader,
      options: {
        publicPath: '../'
      }
    }] : [
      cacheLoader,
      threadLoader,
      {
        loader: 'style-loader',
        options: {
          convertToAbsoluteUrls: true,
          sourceMap: options.sourceMap
        }
      }
    ],
    [{
      loader: 'css-loader',
      options: {
        camelCase: options.camelCase,
        importLoaders: 1,
        localIdentName: library ?
          shortName + '-[local]' :
          '[local]-[hash:' + HASH_LIMIT + ']',
        minimize: options.minimize,
        modules: options.modules,
        sourceMap: options.sourceMap
      }
    }],
    options.postcss ?
      [{
        loader: 'postcss-loader',
        options: {
          config: {
            ctx: {
              lint: {
                configFile: stylelint,
                emitErrors: false,
                ignorePath: stylelintIgnore
              }
            },
            path: postcss
          },
          sourceMap: options.sourceMap
        }
      }] :
      [],
    options.sass ?
      [{
        loader: 'sass-loader',
        options: {
          sourceMap: options.sourceMap
        }
      }] :
      []
  );
};

const scriptLoaders = function (options = {}) {
  /* pragma, typescript, angular */

  return [cacheLoader].concat(
    parallel ? [threadLoader] : [],
    [{
      loader: 'babel-loader',
      options: {
        cacheDirectory: cache,
        plugins: [].concat(
          ['babel-plugin-dynamic-import-node-babel-7'],
          production ?
            [['babel-plugin-transform-node-env-inline']] :
            [],
          options.angular ?
            [['babel-plugin-angular2-annotations']] :
            [],
          [
            ['@babel/plugin-transform-destructuring'],
            ['@babel/plugin-transform-runtime', {
              helpers: false,
              polyfill: false,
              regenerator: true
            }],
            ['@babel/plugin-transform-regenerator', {
              async: false
            }],
            ['@babel/plugin-transform-classes']
          ],
          platforms.cssModules && options.pragma ?
            [['babel-plugin-react-css-modules', {
              context,
              generateScopedName: library ?
                shortName + '-[local]' :
                '[local]-[hash:' + HASH_LIMIT + ']'
            }]] :
            [],
          production && options.pragma && !library ?
            [
              ['babel-plugin-transform-react-remove-prop-types', {
                removeImport: true
              }],

              // Breaks react-hot-loader, only use in production and NOT for libraries
              ['@babel/plugin-transform-react-inline-elements']
            ] :
            [],
          production && options.pragma ?
            [[
              '@babel/plugin-transform-react-constant-elements',
              {allowMutablePropsOnTags: ['FormattedMessage']}
            ]] :
            [],
          !production && options.pragma ?
            [['react-hot-loader/babel']] :
            []
        ),
        presets: [].concat(
          production ?
            [['babel-preset-minify', {
              removeConsole: true,
              removeDebugger: true,
              removeUndefined: false,
              simplify: true
            }]] :
            [],
          [['@babel/preset-env', {
            debug: false,
            decoratorsLegacy: true,
            modules: false,
            targets: {
              browsers: ['last 2 versions', 'safari 7', 'ie 9'],
              chrome: '52',
              node: '6.10',
              uglify: false
            },
            useBuiltIns: 'entry'
          }]],
          options.pragma ?
            [['@babel/preset-react', {
              development: !production,
              useBuiltIns: true
            }]] :
            [],
          [['@babel/preset-stage-0', {
            decoratorsLegacy: true
          }]],
          !options.typescript && platforms.flow ?
            [['@babel/preset-flow', {
              useBuiltIns: true
            }]] :
            [],
        )
      }
    }],
    options.typescript ?
      [{
        loader: 'ts-loader',
        options: {
          configFile: tsconfig,
          happyPackMode: true

          /*
          ,
          getCustomTransformers: function () ({
            before: [tsTransformCssModules({
              generateScopedName: library ?
                shortName + '-[local]' :
                '[local]-[hash:' + HASH_LIMIT + ']'
            })]
          })
          /**/
        }
      }].concat(
        !production && options.angular ?
          [
            {loader: 'angular2-template-loader'},
            {loader: '@angularclass/hmr-loader'}
          ] :
          [],
        [{
          loader: 'tslint-loader',
          options: {
            configFile: tslint,
            emitErrors: false,
            failOnHint: production,
            tsConfigFile: tsconfig,
            typeCheck: false
          }
        }]
      ) :
      [
        {loader: 'source-map-loader'},
        {
          loader: 'eslint-loader',
          options: {
            cache: true,
            configFile: eslint,
            emitWarning: false,
            failOnError: production,
            failOnWarning: production,
            quiet: true
          }
        }
      ]
  );
};

module.exports = {
  context,
  devtool: sourceMap ? production || library ? 'source-map' : 'inline-source-map' : 'nosources-source-map',
  entry: {
    main: [].concat(
      production || library ?
        [] :
        [
          path.join('webpack', 'hot', 'dev-server'),
          path.join('webpack-hot-middleware', 'client')
        ],
      library ? [] : ['@babel/polyfill'],
      library ?
        [] :
        polyfills,
      pwa && production && !library ?
        require.resolve(path.join(__dirname, 'entries', 'workbox.js')) :
        [],
      !library && platforms.typescript ?
        typescriptPolyfills :
        [],
      !library && platforms.angular ?
        angularPolyfills :
        [],
      [context]
    )
  },
  externals: library ? [nodeExternals()] : undefined,
  mode: production ? 'production' : 'development',
  module: {
    rules: [{
      loader: 'file-loader',
      query: {name: 'templates/[name].[ext]?[hash:' + HASH_LIMIT + ']'},
      test: /\.html$/
    }, {
      loader: 'file-loader',
      query: {name: 'icons/[name].[ext]?[hash:' + HASH_LIMIT + ']'},
      test: /\.ico$/
    }, {
      loader: 'file-loader',
      query: {name: 'images/[name].[ext]?[hash:' + HASH_LIMIT + ']'},
      test: /\.(png|jpg)$/
    }, {
      loader: 'file-loader',
      query: {name: 'gifs/[name].[ext]?[hash:' + HASH_LIMIT + ']'},
      test: /\.gif$/
    }, {
      loader: 'file-loader',
      query: {name: 'svg/[name].[ext]?[hash:' + HASH_LIMIT + ']'},
      test: /\.(svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/
    }, {
      loader: 'file-loader',
      query: {name: 'fonts/[name].[ext]?[hash:' + HASH_LIMIT + ']'},
      test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/
    }, {
      loader: 'file-loader',
      query: {name: 'fonts/[name].[ext]?[hash:' + HASH_LIMIT + ']'},
      test: /\.(ttf|eot)(\?v=[0-9]\.[0-9]\.[0-9])?$/
    }, {
      // eslint-disable-next-line no-restricted-syntax,quotes,no-useless-escape
      exclude: new RegExp(`\.g\.css$|\.min\.css$|node_modules\/(?!.*(${postcssWhitelist})).*\.css$`),
      loaders: styleLoaders({
        minimize: production,
        modules: platforms.cssModules,
        postcss: true,
        sourceMap
      }),
      test: /\.css$/
    }, {
      loaders: styleLoaders({
        minimize: production,
        postcss: true,
        sourceMap
      }),
      test: /\.g\.css$/
    }, {
      loaders: styleLoaders({
        camelCase: false,
        minimize: false
      }),
      // eslint-disable-next-line no-restricted-syntax,quotes,no-useless-escape
      test: new RegExp(`\.min\.css$|node_modules\/(?!.*(${postcssWhitelist})).*\.css$`)
    }, {
      // eslint-disable-next-line no-restricted-syntax,quotes,no-useless-escape
      exclude: new RegExp(`\.g\.(scss|sass)$|\.min\.(scss|sass)$|node_modules\/(?!.*(${postcssWhitelist})).*\.(scss|sass)$`),
      loaders: styleLoaders({
        minimize: production,
        modules: platforms.cssModules,
        sass: true,
        sourceMap
      }),
      test: /\.(scss|sass)$/
    }, {
      loaders: styleLoaders({
        minimize: production,
        postcss: true,
        sass: true,
        sourceMap
      }),
      test: /\.g\.(scss|sass)$/
    }, {
      exclude: ignore,
      loaders: scriptLoaders(),
      test: /\.js$/
    }, {
      exclude: ignore,
      loaders: scriptLoaders({
        pragma: platforms.pragma || 'react'
      }),
      test: /\.jsx$/
    }, {
      exclude: ignore,
      loaders: scriptLoaders({
        angular: platforms.angular,
        typescript: true
      }),
      test: /\.ts$/
    }, {
      exclude: ignore,
      loaders: scriptLoaders({
        pragma: platforms.pragma || 'react',
        typescript: true
      }),
      test: /\.tsx$/
    }]
  },
  optimization: {
    runtimeChunk: library ? false : {name: 'manifest'},
    splitChunks: {
      automaticNameDelimiter: '.',
      cacheGroups: {
        default: {
          minChunks: 2,
          priority: -20,
          reuseExistingChunk: true
        },
        vendors: {
          name: 'vendor',
          priority: -10,
          test: /[\\/]node_modules[\\/]/
        }
      },
      chunks: 'all',
      maxAsyncRequests: 5,
      maxInitialRequests: 3,
      minChunks: 1,
      minSize: 30000,
      name: true
    }
  },
  output: {
    crossOriginLoading: 'anonymous',
    devtoolModuleFilenameTemplate: (info) => {
      return 'file://' + path.resolve(info.absoluteResourcePath).replace(/\\/g, '/');
    },
    filename: production && library ?
      '[name].min.js' :
      production ?
        '[name].js?[chunkhash:' + HASH_LIMIT + ']' :
        '[name].js',
    library: library ? 'index' : undefined,
    libraryTarget: 'umd',
    path: staticPath,
    publicPath: library ?
      production ? './' : '/' :
      production ? './bundle/' : '/bundle/',
    umdNamedDefine: true
  },
  performance: {
    hints: false
  },
  plugins: [
    new DefinePlugin({silent: true}),
    new DuplicatePackageCheckerPlugin({
      emitError: true,
      strict: true,
      verbose: true
    }),
    new StyleLintPlugin({
      cache: true,
      cacheLocation: path.join(cache, '.stylelint'),
      configFile: stylelint,
      emitErrors: true,
      files: ['**/*.+(css|sass|scss|less)'],
      ignorePath: stylelintIgnore,
      reportNeedlessDisables: true
    }),
    new CaseSensitivePathsPlugin(),
    new webpack.DefinePlugin({
      'process.env': Object.assign(
        {
          BUILD: {
            DATE: JSON.stringify((new Date()).toString())
          },
          NODE_ENV: JSON.stringify(production ? 'production' : 'development')
        },
        library ? undefined : {
          PACKAGE: {
            DESCRIPTION: JSON.stringify(project.description),
            NAME: JSON.stringify(project.name),
            TITLE: JSON.stringify(project.title),
            VERSION: JSON.stringify(project.version)
          }
        },
        env
      )
    }),
    new webpack.LoaderOptionsPlugin({
      debug: !production,
      minimize: production,
      options: Object.assign({
        context,
        debug: !production,
        minimize: production,
        path: {
          pathinfo: !production
        },
        resolve: {
          extensions: ['', '.js', 'jsx', '.ts', '.tsx']
        }
      })
    })
  ].concat(
    production ?
      [
        new webpack.optimize.ModuleConcatenationPlugin(),
        new webpack.optimize.OccurrenceOrderPlugin(true),
        new MiniCssExtractPlugin({
          chunkFilename: path.join(
            'styles',
            production && library ?
              '[name].min.css' :
              !production && library ?
                '[name].css' :
                production ?
                  '[name].css?[chunkhash:' + HASH_LIMIT + ']' :
                  '[name].css'),
          filename: path.join(
            'styles',
            production && library ?
              '[name].min.css' :
              !production && library ?
                '[name].css' :
                production ?
                  '[name].css?[chunkhash:' + HASH_LIMIT + ']' :
                  '[name].css'
          )
        }),
        new UglifyJsPlugin({
          parallel,
          sourceMap,
          uglifyOptions: {
            mangle: !sourceMap
          }
        }),
        new SubresourceIntegrityPlugin({
          enabled: production,
          hashFuncNames: ['sha256', 'sha384']
        }),
        new BundleAnalyzerPlugin({
          analyzerMode: 'static',
          generateStatsFile: true,
          openAnalyzer: false,
          reportFilename: path.join(reportPath, 'webpack', 'index.html'),
          statsFilename: path.join(reportPath, 'webpack', 'index.json'),
          statsOptions: {
            showPublicPath: false
          }
        })
      ] :
      [
        new webpack.HotModuleReplacementPlugin(),
        new webpack.NoEmitOnErrorsPlugin(),
        new webpack.NamedModulesPlugin()
      ],
    platforms.typescript ?
      [
        new ForkTsCheckerWebpackPlugin({
          memoryLimit: Math.floor(v8.getHeapStatistics().heap_size_limit / 1000000),
          tsconfig,
          workers: parallel ? ForkTsCheckerWebpackPlugin.TWO_CPUS_FREE : 1
        })
      ] :
      [],
    library ?
      [] :
      [
        new HtmlWebpackPlugin({
          alwaysWriteToDisk: true,
          baseHref,
          filename: path.join('..', 'index.html'),
          inject: 'body',
          template: resolve('index.htm', index),
          title: project.title,
          version: project.version
        }),
        new HtmlWebpackHarddiskPlugin()
      ],
    production && !library ?
      [new WebappWebpackPlugin({
        cache,
        favicons: {
          appDescription: project.description,
          appName: project.title,
          background: '#fff',
          developerName: project.author.name,
          developerURL: project.author.url,
          display: 'standalone',
          icons: {
            android: true,
            appleIcon: true,
            appleStartup: true,
            coast: true,
            favicons: true,
            firefox: true,
            opengraph: true,
            twitter: true,
            windows: true,
            yandex: true
          },
          orientation: 'portrait',
          start_url: '/', // eslint-disable-line id-match
          theme_color: '#fff', // eslint-disable-line id-match
          version: project.version
        },
        inject: true,
        logo: favicon,
        prefix: 'favicons/'
      })] :
      [],
    compression && production && !library ?
      [new CompressionPlugin({
        asset: '[path].gz',
        cache: path.join(cache, 'compression'),
        minRatio: 0.8,
        threshold: 860
      })] :
      [],
    pwa && production && !library ?
      [new GenerateSW({
        cacheId: shortName,
        directoryIndex: 'index.html',
        exclude: [/\.map($|\?)/, /\.gz$/],
        importsDirectory: 'workbox',
        importWorkboxFrom: 'local',
        precacheManifestFilename: 'workbox.manifest.js?[manifestHash]',
        swDest: path.join('..', 'workbox.js')
      })] :
      [],
    production && !library ?
      [new HtmlBeautifyPlugin({
        config: {
          html: {
            /* eslint-disable id-match */
            end_with_newline: true,
            indent_inner_html: true,
            indent_size: 2,
            indent_with_tabs: false,
            preserve_newlines: false
            /* eslint-enable id-match */
          }
        }
      })] :
      []
  ),
  profile: true,
  resolve: {
    alias: Object.assign(
      platforms.pragma === 'react' ? {
        '@uirouter/core': resolve('@uirouter/core') || '',
        '@uirouter/react': resolve('@uirouter/react') || '',
        react: resolve('react'),
        'react-dom': resolve('react-dom')
      } : {}
    ),
    extensions: ['.js', '.jsx', '.ts', '.tsx'],
    modules: [
      path.join(process.cwd(), 'node_modules'),
      path.join(process.cwd()),
      path.join(process.cwd(), 'node_modules', 'webpack-digest', 'node_modules')
    ]
  },
  resolveLoader: {
    modules: [
      path.join(process.cwd(), 'node_modules'),
      path.join(process.cwd()),
      path.join(process.cwd(), 'node_modules', 'webpack-digest', 'node_modules')
    ]
  }
};
/*
  eslint-enable
  global-require,
  no-process-env,
  no-undefined,
  no-nested-ternary,
  complexity,
  import/no-commonjs,
  import/unambiguous,
  import/no-dynamic-require,
  import/max-dependencies,
  filenames/match-regex
*/
