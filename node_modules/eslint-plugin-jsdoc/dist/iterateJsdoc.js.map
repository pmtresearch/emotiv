{"version":3,"sources":["../src/iterateJsdoc.js"],"names":["curryUtils","functionNode","jsdoc","tagNamePreference","additionalTagNames","allowOverrideWithoutParam","utils","getFunctionParameterNames","jsdocUtils","getJsdocParameterNamesDeep","getPreferredTagName","getJsdocParameterNames","name","isValidTag","hasTag","isOverrideAllowedWithoutParam","parseComment","commentNode","indent","_","repeat","loc","start","column","value","parsers","commentParser","PARSERS","parse_tag","parse_type","str","data","includes","tag","parse_name","parse_description","iterator","context","sourceCode","getSourceCode","get","Boolean","checkJsdoc","jsdocNode","getJSDocComment","report","message","fixer","fix","node","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression"],"mappings":"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","file":"iterateJsdoc.js","sourcesContent":["import _ from 'lodash';\nimport commentParser from 'comment-parser';\nimport jsdocUtils from './jsdocUtils';\n\nconst curryUtils = (functionNode, jsdoc, tagNamePreference, additionalTagNames, allowOverrideWithoutParam) => {\n  const utils = {};\n\n  utils.getFunctionParameterNames = () => {\n    return jsdocUtils.getFunctionParameterNames(functionNode);\n  };\n\n  utils.getJsdocParameterNamesDeep = () => {\n    return jsdocUtils.getJsdocParameterNamesDeep(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getJsdocParameterNames = () => {\n    return jsdocUtils.getJsdocParameterNames(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getPreferredTagName = (name) => {\n    return jsdocUtils.getPreferredTagName(name, tagNamePreference);\n  };\n\n  utils.isValidTag = (name) => {\n    return jsdocUtils.isValidTag(name, additionalTagNames);\n  };\n\n  utils.hasTag = (name) => {\n    return jsdocUtils.hasTag(jsdoc, name);\n  };\n\n  utils.isOverrideAllowedWithoutParam = () => {\n    return allowOverrideWithoutParam;\n  };\n\n  return utils;\n};\n\nexport const parseComment = (commentNode) => {\n  // Preserve JSDoc block start/end indentation.\n  const indent = _.repeat(' ', commentNode.loc.start.column);\n\n  return commentParser(indent + '/*' + commentNode.value + indent + '*/', {\n    // @see https://github.com/yavorskiy/comment-parser/issues/21\n    parsers: [\n      commentParser.PARSERS.parse_tag,\n      commentParser.PARSERS.parse_type,\n      (str, data) => {\n        if (_.includes(['return', 'returns'], data.tag)) {\n          return null;\n        }\n\n        return commentParser.PARSERS.parse_name(str, data);\n      },\n      commentParser.PARSERS.parse_description\n    ]\n  })[0] || {};\n};\n\nexport default (iterator) => {\n  return (context) => {\n    const sourceCode = context.getSourceCode();\n    const tagNamePreference = _.get(context, 'settings.jsdoc.tagNamePreference') || {};\n    const additionalTagNames = _.get(context, 'settings.jsdoc.additionalTagNames') || {};\n    const allowOverrideWithoutParam = Boolean(_.get(context, 'settings.jsdoc.allowOverrideWithoutParam'));\n\n    const checkJsdoc = (functionNode) => {\n      const jsdocNode = sourceCode.getJSDocComment(functionNode);\n\n      if (!jsdocNode) {\n        return;\n      }\n\n      const indent = _.repeat(' ', jsdocNode.loc.start.column);\n\n      const jsdoc = parseComment(jsdocNode);\n\n      const report = (message, fixer = null) => {\n        if (fixer === null) {\n          context.report(jsdocNode, message);\n        } else {\n          context.report({\n            fix: fixer,\n            message,\n            node: jsdocNode\n          });\n        }\n      };\n\n      const utils = curryUtils(functionNode, jsdoc, tagNamePreference, additionalTagNames, allowOverrideWithoutParam);\n\n      iterator({\n        context,\n        functionNode,\n        indent,\n        jsdoc,\n        jsdocNode,\n        report,\n        sourceCode,\n        utils\n      });\n    };\n\n    return {\n      ArrowFunctionExpression: checkJsdoc,\n      FunctionDeclaration: checkJsdoc,\n      FunctionExpression: checkJsdoc\n    };\n  };\n};\n"]}